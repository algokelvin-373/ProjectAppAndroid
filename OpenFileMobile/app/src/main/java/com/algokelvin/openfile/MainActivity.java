package com.algokelvin.openfile;

import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.util.Base64;
import android.widget.Toast;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.content.FileProvider;

import com.algokelvin.openfile.databinding.ActivityMainBinding;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

public class MainActivity extends AppCompatActivity {
    private final int REQUEST_OPEN_EXCEL = 5000;
    private final int REQUEST_OPEN_DOC = 6000;
    private final int REQUEST_OPEN_PPT = 7000;
    private ActivityMainBinding binding;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = ActivityMainBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());
        initialize(binding);
    }

    private void initialize(ActivityMainBinding binding) {
        binding.btnOpenDoc.setOnClickListener(v -> viewFileDoc());
        binding.btnOpenExcel.setOnClickListener(v -> viewFileExcel());
        binding.btnOpenPpt.setOnClickListener(v -> viewFilePpt());
    }

    private void viewFileDoc() {

    }

    private void viewFileExcel() {
        File file = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS).getPath() + "/algokelvinexcel");
        if (!file.exists()) {
            file.mkdirs();
        }

        int noFile = 4356322;
        String fileName = "Sample_File_Excel";
        String base64Excel = "";
        final String uriString = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS).getPath() + "/algokelvinexcel" + "/" + noFile + "_" + fileName + ".xlsx";
        byte[] excelBytes = Base64.decode(base64Excel, Base64.DEFAULT);

        try {
            FileOutputStream os = new FileOutputStream(uriString);
            os.write(excelBytes);
            os.flush();
            os.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

        try {
            // Open Excel file
            File fileExcel = new File(uriString);
            if (fileExcel.exists()) {
                Uri fileUri = FileProvider.getUriForFile(this, getApplicationContext().getPackageName() + ".provider", fileExcel);
                //Intent intent = new Intent(Intent.ACTION_VIEW);
                Intent intent = new Intent(Intent.ACTION_VIEW);
                intent.setDataAndType(fileUri, "application/vnd.ms-excel");
                intent.setFlags(Intent.FLAG_ACTIVITY_NO_HISTORY);
                intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
                //startActivity(intent);

                // Check if there is an app that can open this type of file
//                 intent.resolveActivity(getPackageManager());
                if (intent.resolveActivity(getPackageManager()) != null) {
                    startActivity(intent);
                    //startActivityForResult(intent, REQUEST_OPEN_EXCEL); // Use startActivityForResult to get result back
                } else {
                    // No app found to open Excel file
                    Toast.makeText(this, "No application found to open this file", Toast.LENGTH_SHORT).show();
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void viewFilePpt() {

    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
    }
}